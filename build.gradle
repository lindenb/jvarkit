/*
 grep -F "call compile-htsjdk-cmd," Makefile | cut -d, -f 2 | while read F; do grep  -w "\"${F}\"" build.gradle > /dev/null || echo $F; done | grep -v -F 'biostar$(1)' | head -n 1 | xargs  -I{} grep ",{},"  Makefile



gradle -Djvarkit.delete.jar=true -Djvarkit.disable.test=true all all2
gradle -Djvarkit.generate.doc=false all all2

*/

//import org.gradle.internal.logging.text.StyledTextOutput 
//import org.gradle.internal.logging.text.StyledTextOutput.Style
import  java.util.stream.Collectors ;

defaultTasks 'top'

ext {
	libraries = new HashMap<>();
	htsjdkVersion = "4.1.1"
	jettyVersion = "9.4.26.v20200117"
	}

class JarFile
	{
	private final String repo;
	String server;
	boolean test=false;
	JarFile(final String repo) {
		this.repo = repo.trim();
		}
	boolean isTest() {
		return this.test;
		}
	JarFile setTest() {
		this.test=true;
		return this;
		}
	JarFile setServer(String s) {
		this.server=s;
		return this;
		}
	@Override
	public int hashCode() { return this.repo.hashCode();}
	@Override
	public boolean equals(Object o) {
		if(o==this) return true;
		if(o==null || !(o instanceof JarFile)) return false;
		return this.repo.equals(JarFile.class.cast(o).repo);
		}
	@Override
	public String toString() {
		return this.repo+" -> "+getUrl()+" "+ getRelativeFile();
		}
	private String[] split() {
		return this.repo.split("[\\:]");
		}
	String getGroup() { return split()[0];}
	String getArctifact() { return split()[1];}
	String getVersion() { return split()[3];}
	
	boolean isSameArctifact(JarFile other) {
		if( !this.getGroup().equals(other.getGroup())) return false;
		if( !this.getArctifact().equals(other.getArctifact())) return false;
		
		return true;
		}

	boolean isReplacing(JarFile other) {
		if( !isSameArctifact(other) ) return false;
		def t1 = this.getVersion().split("[\\.]");
		def t2 = other.getVersion().split("[\\.]");
		for(int i=0;i< t1.length && i<t2.length;i++) {
			try {
				int i1 = Integer.parseInt(t1[i]);
				int i2 = Integer.parseInt(t2[i]);
				if(i1!=i2) return i1>i2;
				}
			catch(Exception err)
				{
				return false;
				}			
			}
		return false;
		}

	public String getServer() {
		return this.server==null?"https://repo1.maven.org/maven2":this.server;
		}
	
	public String getUrl() {
		return getServer() + "/" + getRelativeFile();
		}
	
	public String getRelativeDirectory() {
		return getGroup().replace('.','/')+"/"+getArctifact()+"/"+getVersion();
		}
	public String getRelativeFile() {
		return getRelativeDirectory()+"/"+getArctifact()+"-"+getVersion()+".jar";
		}
	public void download(project)
		{
		final File f= this.toFile(project);
		if(!f.exists())
			{
			project.logger.lifecycle("Downloading "+this.getUrl()+" to "+ f);
			project.ant.mkdir(dir:f.getParent());
			project.ant.get(
				src:getUrl(),
				verbose: true,
				dest: f
				);
			}
		}
	public File toFile(project)
		{
		def baseDir = project.projectDir.getPath()+"/lib";
		final File f= new File(baseDir,getRelativeFile());
		return f;
		}
	}



class Library
	{
	private final def files = new ArrayList<>();
	Library() {
		}
	Library add(String s) {
		return this.add(new JarFile(s));
		}
	Library add(JarFile f) {
		for(int i=0;i< this.files.size();i++)
			{
			JarFile fold = this.files.get(i);
			if(fold.isSameArctifact(f))
				{
				if(f.isReplacing(fold)) {
					//System.err.println("##replace "+fold+" with "+f);
					this.files.set(i,f);
					}
				return this;
				}
			}
		this.files.add(f);
		return this;
		}
	Library add(Library L) {
		if(L!=this) {
			for(int i=0;i< L.files.size();i++)
				{
				this.add(L.files.get(i));
				}
			}
		if(this.isEmpty() && !L.isEmpty()) throw new  GradleException("uh ?"+L);
		return this;
		}
	Library withoutTest() {
		final Library L=new Library().add(this);
		L.files.removeIf{it->it.isTest()};
		return L;
		}
	boolean isEmpty() { return files.isEmpty();}
	public String toString() {
		return files.toString();
		}
	}



libraries.put("htsjdk",new Library().
	add("com.github.samtools:htsjdk:jar:" + ext.htsjdkVersion ).
	add("commons-logging:commons-logging:jar:1.3.0").
	add("org.apache.commons:commons-jexl:jar:2.1.1").
	add("org.apache.commons:commons-compress:jar:1.25.0").
	add("org.tukaani:xz:jar:1.9").
	add("org.json:json:jar:20231013").
	add("org.openjdk.nashorn:nashorn-core:jar:15.4").
	add("org.xerial.snappy:snappy-java:jar:1.1.10.5")
	);
libraries.put("jcommander",new Library().
	add("com.beust:jcommander:jar:1.82")
	);
libraries.put("testng",new Library().
	add(libraries.get("jcommander")).
	add(new JarFile("org.testng:testng:jar:6.14.3").setTest())
	);

libraries.put("jaxb",new Library().
	add("jakarta.xml.bind:jakarta.xml.bind-api:jar:4.0.2").
	add("org.glassfish.jaxb:jaxb-core:jar:4.0.5").
	add("com.sun.istack:istack-commons-runtime:jar:4.2.0").
	//add("com.sun.xml.bind:jaxb-core:jar:2.2.11").
	//add("org.glassfish.jaxb:txw2:jar:2.2.11").
	add("org.glassfish.jaxb:jaxb-runtime:jar:4.0.5").
	add("jakarta.activation:jakarta.activation-api:jar:2.1.3")
	);
libraries.put("berkeleydb",new Library().
	add("com.sleepycat:je:jar:18.3.12")
	);
libraries.put("xjc",new Library().
	add("jakarta.xml.bind:jakarta.xml.bind-api:jar:4.0.2").
//	add("javax.xml.bind:jaxb-api:jar:2.2.11").
	add("org.glassfish.jaxb:jaxb-xjc:jar:4.0.5").
	add("org.glassfish.jaxb:jaxb-core:jar:4.0.5").
	add("org.glassfish.jaxb:codemodel:jar:4.0.5").
	add("org.glassfish.jaxb:xsom:jar:4.0.5").
	add("com.sun.xml.bind.external:relaxng-datatype:jar:4.0.5").
	add("com.sun.xml.bind.external:rngom:jar:4.0.5").
//	add("com.sun.istack:istack-commons-tools:jar:3.0.7").
	add("com.sun.istack:istack-commons-runtime:jar:4.2.0").
	add("com.sun.xml.dtd-parser:dtd-parser:jar:1.5.1").
	add("org.glassfish.jaxb:jaxb-runtime:jar:4.0.5").
	add("jakarta.activation:jakarta.activation-api:jar:2.1.3")
	);
libraries.put("math",new Library().
	add("org.apache.commons:commons-math3:jar:3.6.1")
	);
libraries.put("mysql",new Library().
	add("mysql:mysql-connector-java:jar:5.1.47")
	);
libraries.put("gson",new Library().
	add("com.google.code.gson:gson:jar:2.6.2")
	);
libraries.put("httpclient",new Library().
	add("commons-logging:commons-logging:jar:1.2").
	add("org.apache.httpcomponents:httpcore:jar:4.4.11").
	add("org.apache.httpcomponents:httpclient:jar:4.5.9").
	add("commons-codec:commons-codec:jar:1.11")
	);
libraries.put("jetty",new Library().
	add("javax.servlet:javax.servlet-api:jar:4.0.1").
	add("org.eclipse.jetty:jetty-webapp:jar:" + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-http:jar:"  + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-server:jar:" + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-io:jar:" + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-security:jar:" + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-servlet:jar:"  + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-util:jar:" + ext.jettyVersion).
	add("org.eclipse.jetty:jetty-xml:jar:" + ext.jettyVersion)
	);

libraries.put("derby",new Library().
	add("org.apache.derby:derby:jar:10.12.1.1").
	add("org.apache.derby:derbyclient:jar:10.12.1.1")
	);
libraries.put("jena",new Library().
	add("commons-io:commons-io:jar:2.12.0").
	add("commons-cli:commons-cli:jar:1.4").
	add("commons-codec:commons-codec:jar:1.11").
	add("org.apache.jena:jena-iri:jar:3.10.0").
	add("org.apache.jena:jena-base:jar:3.10.0").
	add("org.apache.jena:jena-core:jar:3.10.0").
	add("org.slf4j:slf4j-api:jar:1.7.25").
	add("org.apache.jena:jena-shaded-guava:jar:3.7.0")
	);
libraries.put("arq",new Library().
	add(libraries.get("jena")).
	add("org.apache.jena:jena-arq:jar:3.10.0").
	add("com.github.jsonld-java:jsonld-java:jar:0.12.1").
	add("org.apache.commons:commons-lang3:jar:3.4").
	add("org.apache.httpcomponents:httpclient:jar:4.5.5").
	add("org.apache.httpcomponents:httpclient-cache:jar:4.5.5").
	add("org.apache.jena:jena-shaded-guava:jar:3.10.0").
	add("org.apache.thrift:libthrift:jar:0.10.0")
	);
libraries.put("leveldb",new Library().
	add("org.iq80.leveldb:leveldb:jar:0.12").
	add("com.google.guava:guava:jar:21.0")
	);

libraries.put("biojava",new Library().
	add("org.biojava:biojava-alignment:jar:6.0.5").
	add("org.biojava:biojava-core:jar:6.0.5").
	add("org.biojava.thirdparty:forester:jar:1.039").
	add("org.slf4j:slf4j-api:jar:1.7.30")
	);


libraries.put("springcontext",new Library().
	add("org.springframework:spring-context:jar:6.0.9").
	add("org.springframework:spring-aop:jar:6.0.9").
	add("org.springframework:spring-core:jar:6.0.9").
	add("org.springframework:spring-expression:jar:6.0.9").
	add("org.springframework:spring-beans:jar:6.0.9") //ORDER MATTERS because zip contains same files META-INF/spring.schemas
	);

libraries.put("freemarker",new Library().
	add("org.freemarker:freemarker:jar:2.3.32")
	);


libraries.put("velocity",new Library().
	add("org.slf4j:slf4j-api:jar:1.7.30").
	add("org.apache.commons:commons-lang3:jar:3.16.0").
	add("org.apache.velocity:velocity-engine-core:jar:2.3")
	);


// https://stackoverflow.com/questions/28498688




public class CompileJVarkit extends DefaultTask {
	@Input @Optional
	String mainClass = ''
	@Input @Optional
	String srcDir =''
	@Input @Optional
	String testDir =''
	@Input @Optional
	String tmpDir = ""
	@Input @Optional
	String distDir = ""	
	@Input @Optional
	String docDir = ""
	@Input @Optional
	String testNgDir=""
	@Input @Optional
	String jdkTarget = "17"
	@Input @Optional
	String jdkSource = "17"
	@Input @Optional
	Library jarLibs = new Library();
	@Input
	boolean requireJfx = false;	
	@Input @Optional
	String deprecatedMsg = null;
	@Input @Optional
	def xsdFiles =[];	
	@Input @Optional
	String endMsg = null;
	@Input
	boolean with_jni = false;
	@Input @Optional
	def otherJavaFiles = [];
	@Input
	boolean with_jaxb=false;

	CompileJVarkit() {
		def baseDir = this.getProject().projectDir.getPath();
		this.srcDir = baseDir + "/src/main/java"
		this.testDir = baseDir + "/src/test/java"
		this.tmpDir = baseDir + "/tmp"
		this.distDir = baseDir + "/dist"
		this.docDir = baseDir + "/docs"
		this.testNgDir = baseDir+"/tests-output"
		String jvm = java.lang.System.getProperty("jvarkit.target",null);
		if(jvm!=null && !jvm.isEmpty()) {
			jdkTarget = jvm;
			jdkSource = jvm;
			}
		}
	void runXJC() /* see also https://dzone.com/articles/running-jaxb-xjc-compiler-with-openjdk-11 */
		{
		if(this.xsdFiles.size()==0) return;
		/** download required lib for xjc */
		def xjcjars = project.ext.libraries.get("xjc").files;
		xjcjars.each{it->it.download(project)};
		def params=[];
		for(def src : this.xsdFiles)
			{
			project.logger.info("compiling xjc :" +src);
			if(src.equals("gb"))
				{
				ant.java(
					classname : "com.sun.tools.xjc.XJCFacade",
					fork: true,
					failonerror: true,
					classpath : xjcjars.collect{it->it.toFile(project).path}.join(":")
					) {
					jvmarg(value:"-DenableExternalEntityProcessing=true")
					arg(value: "-d")
					arg(value: this.tmpDir)
					arg(value: "-p")
					arg(value:"gov.nih.nlm.ncbi.gb")
					arg(value:"-dtd")
					arg(value:"https://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd")
					}
				}
			else if(src.equals("pubmed"))
				{
				ant.java(
					classname : "com.sun.tools.xjc.XJCFacade",
					fork: true,
					failonerror: true,
					classpath : xjcjars.collect{it->it.toFile(project).path}.join(":")
					) {
					jvmarg(value:"-DenableExternalEntityProcessing=true")
					arg(value: "-d")
					arg(value: this.tmpDir)
					arg(value: "-p")
					arg(value:"gov.nih.nlm.ncbi.pubmed")
					arg(value:"-dtd")
					arg(value:"https://www.ncbi.nlm.nih.gov/corehtml/query/DTD/pubmed_100101.dtd")
					}
				}
			else if(src.equals("dbsnp"))
				{
				ant.java(
					classname : "com.sun.tools.xjc.XJCFacade",
					fork: true,
					failonerror: true,
					classpath : xjcjars.collect{it->it.toFile(project).path}.join(":")
					) {
					jvmarg(value:"-DenableExternalEntityProcessing=true")
					arg(value: "-d")
					arg(value: this.tmpDir)
					arg(value: "-p")
					arg(value:"gov.nih.nlm.ncbi.dbsnp")
					arg(value:"src/main/resources/xsd/ncbi/docsum_3.4.xsd")
					}
				}
			else if(src.equals("genoex"))
				{
				ant.java(
					classname : "com.sun.tools.xjc.XJCFacade",
					fork: true,
					failonerror: true,
					classpath : xjcjars.collect{it->it.toFile(project).path}.join(":")
					) {
					jvmarg(value:"-DenableExternalEntityProcessing=true")
					arg(value: "-d")
					arg(value: this.tmpDir)
					arg(value: "-p")
					arg(value:"gov.nih.nlm.ncbi.dbsnp.gt")
					arg(value:"src/main/resources/xsd/ncbi/genoex_1_5.xsd")
					}
				}
			else
				{
				throw new GradleException("Unknown xsd target "+src);
				}
			
			
			}
		}
	@Input
	boolean isJavaFxAvailable() {
		try {
		    this.getClass().getClassLoader().loadClass("javafx.embed.swing.JFXPanel");
		    return null;
		    }
		catch (ClassNotFoundException e) {
			return false;
			}
		}
	@Input
	boolean isFatJar() {
		return java.lang.System.getProperty("jvarkit.fat.jar","true").equals("true");
		}
	
	private boolean isGeneratingDoc() {
		if(!java.lang.System.getProperty("jvarkit.generate.doc","true").equals("true")) return false;
		return true;
		}
	
	@Input
	String getMainPackage() {
		String s= this.mainClass;
		int dollar = s.indexOf('$');
		if(dollar!=-1) s=s.substring(0,dollar);
		int dot = s.lastIndexOf('.');
		if(dot==-1) return "";
		return s.substring(0,dot);
		}

	private File getMainJavaTestFile() {
		String travis = java.lang.System.getenv("TRAVIS");
		if(travis!=null && travis.equals("true")) return null;
		if(java.lang.System.getProperty("jvarkit.disable.test","false").equals("true")) return null;

		String s = this.testDir +"/"+ getTestNgClass().replace('.','/')+".java";

		File f = new File(s);

		if(!f.exists()) return null;
		return f;
		}

	@Input
	String getMainJavaSource() {
		String s = this.mainClass;
		int dollar = s.indexOf('$');
		if(dollar!=-1) s=s.substring(0,dollar);
		s = this.srcDir + "/" + s.replace('.','/')+".java";
		return s;
		}
	@Input
	String getTestNgClass() {
		String s = this.mainClass;
		int dollar = s.indexOf('$');
		if(dollar!=-1) s=s.substring(0,dollar);
		return s+"Test";
		}
	@Input
	String getAntInclude() {
		final String s= this.getMainJavaSource();
		final int slash = s.lastIndexOf('/');
		String s2 =  "**"+s.substring(slash);
		return s2;
		}
	@Input
	String getAntTestInclude() {
		String s= this.getMainJavaSource();
		int slash = s.lastIndexOf('/');
		s= s.substring(slash);
		int dot = s.lastIndexOf('.');
		s= s.substring(0,dot);
		return "**"+s+"Test.java";	
		}
	public String toString() {
		return	""+this.getName()+" "+this.mainClass;
		}
	
	

	private String getExecutablePath(String exe) {
	    try {
		def stdout = new ByteArrayOutputStream()
		    project.exec {
			commandLine 'which', exe
			standardOutput = stdout
		    }
		    return stdout.toString().trim();
		}
	    catch(Exception err) { return "";}
	    }

	@Input
	public String getGitHash() {
	    try {
		def stdout = new ByteArrayOutputStream()
		    project.exec {
			commandLine 'git', 'rev-parse', '--short', 'HEAD'
			standardOutput = stdout
		    }
		    return stdout.toString().trim()
		}
	    catch(Exception err) { return "undefined";}
	    }

	/**
	def getConfiguration() {
		//System.err.println("SEARCHING "+ this.configName);
		//project.configurations.each{ System.err.println("conf : "+it.name); } 
		def c= project.configurations.find{it.name == this.configName}
		//System.err.println("GOT::"+this.configName +" =  "+c);
		if(c==null) throw new GradleException("Cannot find config "+this.configName+" "+c);
		
		return c;	
		}	
	*/
         void installHtsJni() {
	/** compile jni */
        if(this.with_jni)  {
             	try {
		    final File htsjniDir = new File("lib/htsjni");
		    if(!htsjniDir.exists()) {
		    	project.logger.warn("downloading htsjni. Requires git");
			project.exec {
				    workingDir "lib"
			            commandLine "git", "clone", "https://github.com/lindenb/htsjni", "htsjni"
			            standardOutput = System.err
		                }
		    	}
		    project.logger.warn("updating htsjni. Requires git.");
		    project.exec {
				    workingDir htsjniDir.toString()
			            commandLine "git", "pull", "origin", "master"
			            standardOutput = System.err
		                }
		    project.logger.warn("compiling htsjni. Requires Linux/gcc/ and common C libraries like gz, threads, etc... ");
		    project.exec {
			            commandLine "make", "-C", "lib/htsjni"
			            standardOutput = System.err
		                }
		    
		            }
	            catch(Exception err) {
                    throw new GradleException("java/jni Failed.",err);
	                }
            	    }
		/** end C Bindings */

         }


	 @TaskAction
	 void doIt() {
		if(this.deprecatedMsg!=null) {
			project.logger.warn("[DEPRECATED] "+getName()+" : I won't create this project because it is deprecated : "+this.deprecatedMsg);
			return;			
			}
		if(this.requireJfx && !isJavaFxAvailable())
			{
			project.logger.warn("I won't compile "+getName()+" because the current jvm doesn't support javafx");
			return;
			}
		// ignore for simple app if(this.jarLibs.isEmpty()) throw new GradleException("Empty ?? "+this.jarLibs);
		
		/** BEGIN java annotation processor */

		final File annotProcJar = new File(this.distDir+"/annotation_processor.jar")
		if(true) {
			ant.mkdir(dir:"${this.tmpDir}/META-INF/services")

			ant.javac(
				destdir: this.tmpDir,
				srcdir: this.srcDir,
				includeantruntime:false,
				failonerror: true,
				fork: true,
				target: this.jdkTarget,
				source: this.jdkSource,
				debug: true,
				
				)  {
					include(name: "**/JVarkitAnnotationProcessor.java")
					compilerarg(value:'-Xlint')
				}
	
			ant.echo(message: "com.github.lindenb.jvarkit.annotproc.JVarkitAnnotationProcessor\n",
				file: "${this.tmpDir}/META-INF/services/javax.annotation.processing.Processor");
		
			ant.jar(destfile: annotProcJar,
				basedir:this.tmpDir
				);
		
		ant.delete( dir :  this.tmpDir )
		}
		/** END java annotation processor */



		/** prepare directories */
		ant.mkdir(dir:"${this.tmpDir}/META-INF")
		ant.mkdir(dir:"${this.distDir}")
		/** download libraries */
		for(final JarFile j: this.jarLibs.files)
			{
			j.download(this.project);
			}
		/** htsjni */
		this.installHtsJni();
		/** run xjc if needed */
		this.runXJC();
		
		/** copy main source */
		// useless since java processor ant.mkdir(dir:"${this.tmpDir}/" + this.getMainPackage().replace('.','/') )
		
		/** opendjk properties , required for external compilation */
		final File distJar = new File(this.distDir+"/"+this.getName()+".jar")

		ant.echo(message: "java="+getExecutablePath("java")+"\n"+
				"javac="+getExecutablePath("javac")+"\n"+
				"jar="+getExecutablePath("jar")+"\n"+
				"self="+ distJar.getPath() +"\n"
				,file: "${this.tmpDir}/META-INF/jdk.properties");

		/** GATK4 stuff */

		if(!System.getProperty('gatk4.local.jar',"").isEmpty() ) {
			ant.echo(message: "gatk4="+ System.getProperty('gatk4.local.jar',""));
			File gatk4jar = new File(System.getProperty('gatk4.local.jar',""));
			System.err.println("COMPILATION WITH GATK4 enabled");
			ant.javac(
				destdir: this.tmpDir,
				srcdir: this.srcDir+":"+this.tmpDir,
				includeantruntime:false,
                        	failonerror: true,
                        	fork: true,
				classpath: gatk4jar.path,
				target: this.jdkTarget,
	                        source: this.jdkSource,
        	                debug: true
				) {
				  include(name:"**/Gatk4ProxyImpl.java")
				  compilerarg(value:'-Xlint')
				  }

			}
		else
			{
			//System.err.println("COMPILATION WITH GATK4 disabled.");
			}




		/* compile sources */
		//System.err.println("JAVA_PATH="+getConfiguration().asPath);
		final Set<File> classpath1 = this.jarLibs.withoutTest().files.collect{it->it.toFile(project)} as Set;
		if(this.with_jni) classpath1.add(new File("lib/htsjni/htslib.jar"));
		/** not the 'big test' */

		ant.javac(
			destdir: this.tmpDir,
			srcdir: this.srcDir+":"+this.tmpDir,
			includeantruntime:false,
			failonerror: true,
			fork: true,
			classpath : annotProcJar.path + ":" + classpath1.collect{it->it.path}.join(":"),
			target: this.jdkTarget,
			source: this.jdkSource,
			debug: true
			)  {
				include(name: this.getAntInclude())
				if(this.with_jaxb) {
					include(name: "**/package-info.java")
					include(name: "**/ObjectFactory.java")
					}
				include(name: "**/Program.java") // add this otherwise skipped because exists in annotation processor
				for(def osrc: this.otherJavaFiles) {
					include(name: osrc)
					}
				compilerarg(value:'-Xlint')
			}
		
		
		ant.copy(
			file: this.getMainJavaSource(),
			todir:"${this.tmpDir}/" + this.getMainPackage().replace('.','/')
			)

		
		
		
		/* shall we download Sequence Ontology ? */
		File soTreeClassFile = new File("${this.tmpDir}/com/github/lindenb/jvarkit/util/so/SequenceOntologyTree.class");
		if(soTreeClassFile.exists())
			{
			ant.mkdir(dir:"${this.tmpDir}/META-INF/so")
			final File soOwlFile = new File( this.getProject().projectDir.getPath()+"/src/main/resources/so/so-simple.owl");
			if(!soOwlFile.exists())
				{
				project.logger.warn("download to "+soOwlFile);
				ant.mkdir(dir:soOwlFile.parent)
				ant.get(
					src:"https://raw.githubusercontent.com/The-Sequence-Ontology/SO-Ontologies/master/Ontology_Files/so-simple.owl",
					verbose:true,
					dest:soOwlFile
					);
				}
			System.err.println("copy to "+soOwlFile);
			ant.copy(
				file: soOwlFile,
				todir:"${this.tmpDir}/META-INF/so"
				)
			}
        /* copy resources  ? */
		ant.mkdir(dir:"${this.tmpDir}/META-INF/spring")
		ant.copy(
				file: new File( this.getProject().projectDir.getPath()+"/src/main/resources/spring/default-vcfstats-analyzers.xml") ,
				todir:"${this.tmpDir}/META-INF/spring"
				)
			


		/** chromosome mapping file */
		final File chromMappingFile = new File( this.getProject().projectDir.getPath()+"/src/main/resources/chromnames/mapping.tsv");
		if(chromMappingFile.exists()) {
			ant.mkdir(dir:"${this.tmpDir}/META-INF/chromnames")
			ant.copy(
				file: chromMappingFile ,
				todir:"${this.tmpDir}/META-INF/chromnames"
				)
			}

		if(isFatJar()) {
			for(final File jf:classpath1) {
				ant.unzip(src:jf,dest:this.tmpDir,overwrite:true)
				}
			}
		/* jar tmp dir */
		final String now = new Date().format("yyyyMMddHHmmss");
		ant.jar(destfile: distJar,
			basedir:this.tmpDir
			){
 			 manifest {
				attribute(name:"Main-Class",     value: this.mainClass )
				attribute(name:"Htsjdk-Version", value: project.ext.htsjdkVersion)
				attribute(name:"Git-Hash",       value: getGitHash())
				attribute(name:"Release",        value: "v2024.08.25")
				attribute(name:"Compile-Date",   value: now)
				attribute(name:(isFatJar()?"Ignore-Class-Path":"Class-Path"), value: classpath1.collect{it.path}.join(" "));
				}
			}
		//remove tmpDir
		ant.delete( dir :  this.tmpDir )
		// done : https://stackoverflow.com/questions/14516693/
		project.logger.lifecycle("jar file generated :" + distJar)
		
		if( isGeneratingDoc()) {
            if(this.name.equals("jvarkit")) {
                ant.java(
			                jar :  this.distDir+"/${this.name}.jar" , fork: true
			                ) {
			                arg(value: "--readthedocs")
			                arg(value: ".")
			                }
                }
            else
                {
		        /* generate doc */
		        ant.java(
			        jar :  this.distDir+"/${this.name}.jar" , fork: true
			        ) {
			        jvmarg(value: "-Djvarkit.doc.dir=${this.docDir}");
			        arg(value: "--help")
			        arg(value: "--helpFormat")
			        arg(value: "make-doc")
			        }
                }
		}

		/** test */
		
		final File testJava = getMainJavaTestFile();
		if(!isFatJar() || testJava==null)
			{
			project.logger.warn("No Test will be executed for "+this.getName());
			project.logger.debug(" (test-file:"+testJava+" fat:"+isFatJar()+")");
			}
		else
			{
			ant.mkdir(dir: this.tmpDir)

			project.logger.warn("Test will be executed in "+this.testNgDir+"/"+getName()+"/index.html");
			final Set<File> classpath2 = new HashSet<>();
			classpath2.add(distJar);
			for(JarFile f:this.jarLibs.files)
				{
				if(!f.isTest()) continue;
				classpath2.add(f.toFile(project));
				}
			if(this.with_jni) classpath2.add(new File("lib/htsjni/htslib.jar"));
			
			ant.javac(
				destdir: this.tmpDir,
				srcdir: this.testDir+":"+ this.srcDir,
				includeantruntime:false,
				failonerror: true,
				fork: true,
				classpath : classpath2.collect{it->it.path}.join(":"),
				target: this.jdkTarget,
				source: this.jdkSource,
				debug: true
				)
				{
				include(name:"**/MiniTestNG.java")
				include(name: getAntTestInclude())
				compilerarg(value:'-Xlint')
				}
			
			
			ant.mkdir(dir: this.testNgDir+"/"+getName());
			try {
			ant.java(
				classname : "com.github.lindenb.jvarkit.tools.tests.MiniTestNG",
				fork: true,
				failonerror: false,
				classpath : this.tmpDir+":"+classpath2.collect{it->it.path}.join(":")
				) {
				arg(value: "-d")
				arg(value: this.testNgDir+"/"+getName())
				arg(value: getTestNgClass());
				}
			} catch(Throwable err) {
				project.logger.warn("test failed.");

			}
			
			ant.delete( dir :  this.tmpDir )
			}
		
		/** delete the jar at the if specified , jars can be big and I just want to generate the doc*/
		if( java.lang.System.getProperty("jvarkit.delete.jar","false").equals("true")) {
			project.logger.warn("delete jar "+ distJar);
			ant.delete(file: distJar)
			}
		/** message at the end */
		if(this.endMsg!=null && !this.endMsg.trim().isEmpty()) {
			project.logger.info("\n#\n#\n# "+ this.endMsg+"\n#\n#\n");
			}
		}
	}

String biostar2java(int i) {
	return "com.github.lindenb.jvarkit.tools.biostar.Biostar"+i;
	}

Library combineLibs(String...array)
	{
	final Library L= new Library();
	for(String n: array)
		{
		final Library l2= libraries.get(n);
		if(l2==null) throw new GradleException("Cannot find library "+n);
		L.add(l2);
		}
	return L;
	}

def all=new ArrayList<>();
def all2=new ArrayList<>();






/** simple tasks, just jcommander+htsjdk */



all2.add( task("bamindexreadnames", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamindexnames.BamIndexReadNames"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("bamqueryreadnames", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamindexnames.BamQueryReadNames"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});




all2.add( task("buildwpontology", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.BuildWikipediaOntology"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("bwamemdigest", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.mem.BWAMemDigest"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("bwamemnop", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.mem.BWAMemNOp"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("casectrlcanvas", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.CaseControlCanvas"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("casectrljfx", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.CaseControlJfx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfburdengtf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenGtf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("coveragenormalizer", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.CoverageNormalizer"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("downsamplevcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.DownSampleVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("faidxsplitter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FaidxSplitter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fastgenotypegvcfs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gvcf.FastGenotypeGVCFs"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fastq2fasta", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FastqToFasta"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fastqentropy", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastq.FastqEntropy"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("fastqjs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastq.FastqJavascript"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fastqphred64to33", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastq.ConvertPhred64toFastq33"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("fastqsplitinterleaved", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastq.FastqSplitInterleaved"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fastqsplit", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastq.FastqSplit"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("findcorruptedfiles", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FindCorruptedFiles"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("findmyvirus", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.mem.FindMyVirus"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("fixvarscanmissingheader", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FixVarScanMissingVCFHeader"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fixvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FixVCF"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("fixvcfformat", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.FixVcfFormat"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("gcanddepth", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.GcPercentAndDepth"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("genomicjaspar", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.jaspar.GenomicJaspar"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("gexftr", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gephi.GexfTransformer"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("gogenereporter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.groupbygene.GoGeneReporter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("igvreview", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.igvreview.IgvReview"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	requireJfx = true
	});
all2.add( task("ilmnfastqstats", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.IlluminaStatsFastq"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("impactofduplicates", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.impactdup.ImpactOfDuplicates"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("indexcovjfx", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.indexcov.IndexCovJfx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	requireJfx = true
	});
all2.add( task("bam4indexcov", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.indexcov.BamForIndexCov"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("depthanomaly", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.DepthAnomaly"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("cnvslidingwindow", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.CnvSlidingWindow"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("knime2txt", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.KnimeToText"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("localrealignreads", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.LocalRealignReads"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("lumpyvcf2circos", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.lumpysv.LumpyVcfToCircos"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("mergecnvnator", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.MergeCnvNator"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("mergesv", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.MergeStructuralVariants"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("metrics2xml", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.metrics2xml.PicardMetricsToXML"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("ncbigenedump", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.NcbiGeneDump"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("ngsfilessummary", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.ngsfiles.NgsFilesSummary"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("noemptyvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.NoEmptyVCF"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("nozerovariationvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.NoZeroVariationVCF"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("pademptyfastq", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.PadEmptyFastq"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("prettytable", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.PrettyTable"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});




all2.add( task("samcolortag", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.samjs.SamColorTag"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samcustomsortjdk", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.samjs.SamCustomSortJdk"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("samjmx", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.jmx.SamJmx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samjs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.samjs.SamJavascript"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("samretrieveseqandqual", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SamRetrieveSeqAndQual"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("samshortinvert", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.SamShortInvertion"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("saminversions", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.SamInversions"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samtranslocations", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.SamTranslocations"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("svneg", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.SamStructVarNeg"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("sigframe", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.sigframe.SigFrame.Main"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("simpleplot", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SimplePlot"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	jdkTarget="8"
	jdkSource="8"
	});
all.add( task("skipxmlelements", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SkipXmlElements"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("splitbytile", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.splitbytitle.SplitByTile"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("splitread", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.splitread.SplitRead"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("trapindexer", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.trap.TrapIndexer"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});



all.add( task("vcf2bed", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfToBed"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcf2ps", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfToPostscript"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcf2sql", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcf2sql.VcfToSql"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcf2svg", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcf2svg.VcfToSvg"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfafinfofilter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfAfInfoFilter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("bamallelebalance", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.allelebalance.BamAlleleBalance"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfadfraction", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfAlleleDepthFraction"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("vcfannobam", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfannobam.VCFAnnoBam"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfbed", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfbed.VCFBed"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfburden", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfBurden"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfburdengoenrichment", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenGoEnrichment"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfburdenrscriptv", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenRscriptV"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfburdensplitter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenSplitter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfburdensplitter2", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenSplitter2"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfcalledwithanothermethod", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfCalledWithAnotherMethod"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfclusteredreadedge", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfClusteredReadEdge"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfcmppred", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VCFComparePredictions"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("vcfcomm", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VCFComm"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfcompare", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VCFCompare"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfcomparecallers", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VcfCompareCallers"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfcomparecallersonesample", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VcfCompareCallersOneSample"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfcomparegt", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VCFCompareGT"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfcutsamples", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfCutSamples"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfdoest", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfDoest"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfepistatis01", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.epistasis.VcfEpistatis01"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcffilterxpath", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfFilterXPath"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfgapfrequent", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.VcfGapFrequent"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfgetvariantbyindex", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfGetVariantByIndex"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfgo", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfgo.VcfGeneOntology"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("vcfindextabix", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfIndexTabix"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfjaspar", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.jaspar.VcfJaspar"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfjmx", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.jmx.VcfJmx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfmultiways", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.liftover.VcfMultiWays"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfloopovergenes", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfLoopOverGenes"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfmakedict", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfCreateDictionary"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfmerge", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfmerge.VCFMerge"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfnocall2homref", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfNoCallToHomRef"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("vcfphylotree", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.phylo.VcfPhyloTree"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("vcfremovegenotypejs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfRemoveGenotypeJs"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfrenamesamples", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfRenameSamples"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("vcfreplacetag", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfstripannot.VCFReplaceTag"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	deprecatedMsg="Use `bcftools annotate -c ` "
	});
all2.add( task("vcfresetvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfRemoveGenotypeIfInVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("vcfsimulator", type: CompileJVarkit) {
		mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfSimulator"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfstatsjfx", type: CompileJVarkit) {
			mainClass = "com.github.lindenb.jvarkit.tools.vcstats.VcfStatsJfx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfvcf.VcfVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("worldmapgenome", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.circular.WorldMapGenome"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

/* other */



all2.add( task("vcfensemblreg", type: CompileJVarkit) {
	mainClass =  "com.github.lindenb.jvarkit.tools.ensemblreg.VcfEnsemblReg"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	deprecatedMsg = "Structure of ensembl reg has changed"
	});

all.add( task("biostar92368", type: CompileJVarkit) {
	mainClass = biostar2java(92368)
	jarLibs = combineLibs("htsjdk","testng","jcommander","berkeleydb")
	});



all.add( task("naivecnvdetector", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.NaiveCnvDetector"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb","math")
	});
all.add( task("vcfucsc", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfucsc.VcfUcsc"
	jarLibs = combineLibs("htsjdk","testng","jcommander","mysql")
	});
all2.add( task("vcfucscgdb", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfucsc.VcfUcscGdb"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("bamstatsjfx", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamstats01.BamStatsJfx"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("bamstats02", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamstats01.BamStats02"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("bamstats02view", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamstats01.BamStats02View"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("bamtreepack", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.treepack.BamTreePack"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("gb2gff", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.genbank.GenbankToGff3"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("mergeblastxml", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.blast.MergeBlastXml"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	xsdFiles = ["blast"]
	});


all.add( task("fastqrecordtreepack", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.treepack.FastqRecordTreePack"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("concatsam", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.ConcatSam"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});



all.add( task("pubmedfilterjs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.pubmed.PubmedFilterJS"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});


all2.add( task("psl2bam", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.PslxToBam"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("bim2vcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.BimToVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("haloplexparasite", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.haloplex.HaloplexParasite"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("queue2make", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.QueueToMake"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("sammaskalignedbases", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SamMaskAlignedBases"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samreadlengthdistribution", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SamReadLengthDistribution"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samscansplitreads", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.SamScanSplitReads"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samslop", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.SamSlop"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("samstats01", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.bamstats01.BamStats01"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("sortvcfonref2", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.sortvcfonref.SortVcfOnRef2"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("splitbam3", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.splitbam.SplitBam3"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcf2rdf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcf2rdf.VcfToRdf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcf2zip", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfconcat.VcfToZip"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfgtfsplitter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfGtfSplitter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfwindowsplitter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfSlidingWindowSplitter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfstrechofgt", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.VcfStretchOfGt"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcftreepack", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.treepack.VcfTreePack"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("forkvcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.ForkVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfbedsetfilter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfbed.VCFBedSetFilter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcffixindels", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcffixindels.VCFFixIndels"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfin", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfcmp.VcfIn"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfpredictions", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfannot.VCFPredictions"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("vcfbiomart", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.ensembl.VcfBiomart"
	jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient")
	});
all.add( task("vcfdas", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfdas.VcfDistributedAnnotationSystem"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb","jetty")
	deprecatedMsg = "deprecated, won't compile"
	});

all.add( task("vcffilterjs", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcffilterjs.VCFFilterJS"
	jarLibs = combineLibs("htsjdk","testng","jcommander","gson")
	});


all.add( task("vcfremoveunusedalt", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.VcfRemoveUnusedAlt"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfstripannot", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfstripannot.VCFStripAnnotations"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcffamilies", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcftrios.VCFFamilies"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfensemblvep", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.ensembl.VcfEnsemblVepRest"
	jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient")
	});

all2.add( task("htsfileserver", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.server.HtsFileServer"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jetty")
	});


all2.add( task("vcfderby01", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfDerby01"
	jarLibs = combineLibs("htsjdk","testng","jcommander","derby")
	});

all2.add( task("indexcov2sv", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.indexcov.IndexCovToSV"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("validatecnv", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.structvar.ValidateCnv"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcfburdenfisherv", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenFisherV"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all.add( task("vcffilternotinpedigree", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfFilterNotInPedigree"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all.add( task("vcfburdenexac", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfBurdenFilterExac"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});

all.add( task("vcfinjectpedigree", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.burden.VcfInjectPedigree"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});
/* TODO copy samtools resources 
all.add( task("gbrowserhtml", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.misc.GBrowserHtml"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});
*/


all2.add( task("vcfgnomadexomevsgenome", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gnomad.VcfGnomadExomeVsGenome"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all.add( task("vcfannotwithbeacon", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.ga4gh.VcfAnnotWithBeacon"
	jarLibs = combineLibs("htsjdk","testng","jcommander","gson","berkeleydb","httpclient")
	});

all.add( task("lumpysort", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.lumpysv.LumpySort"
	jarLibs = combineLibs("htsjdk","testng","jcommander","berkeleydb")
	});


all2.add( task("optimizer", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.optimizer.Optimizer"
	jarLibs = combineLibs("htsjdk","testng","jcommander","gson")
	});
all.add( task("tviewserver", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.tview.TViewServer"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jetty")
	});
all2.add( task("vcftrap", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.trap.VcfTrap"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	endMsg = "never used"
	});
all2.add( task("vcfoptimizeped4skat", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.skat.VcfOptimizePedForSkat"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});
all.add( task("vcfskatslidingwindow", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.skat.VcfSkatSlidingWindow"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});
all.add( task("vcfskat", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.skat.VcfSkat"
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	});

all.add( task("biostar78400", type: CompileJVarkit) {
	mainClass = biostar2java(78400)
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	endMsg = "written for biostar. never used."
	});
all.add( task("biostar140111", type: CompileJVarkit) {
	mainClass = biostar2java(140111)
	jarLibs = combineLibs("htsjdk","testng","jcommander","jaxb")
	xsdFiles = ["dbsnp","genoex"]
	endMsg = "written for biostar. never used."
	});
// $(eval $(call compile-htsjdk-cmd,gephicmd,${jvarkit.package}.tools.gephi.GephiCmd,${jcommander.jar} $(lib.dir)/org/gephi/gephi.jar ))

all2.add( task("onethousandbams", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.onekgenomes.OneThousandBam"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	jdkTarget="8"
	jdkSource="8"
	endMsg = "written for isabel. not much tested/used."
	});



all2.add( task("vcfgnomadpext", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gnomadpext.VcfGnomadPext"
	jarLibs = combineLibs("htsjdk","testng","jcommander","gson")
	endMsg = "not tested/used for now"
	});

all2.add( task("vcfsparql", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.vcfsparql.VcfSparql"
	jarLibs = combineLibs("htsjdk","testng","jcommander","arq")
	endMsg = "Just a proof of concept, it's very slow."
	});



all2.add( task("vcfevaiannot", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.evai.VcfEvaiAnnot"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("hicfileinfo", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.hic.HicFileInfo"
	jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient")
	});
all2.add( task("hicstraw", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.hic.HicStraw"
	jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient")
	});

all2.add( task("ijgv2vcf", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.ijgvd.IjgvdToVcf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});
all2.add( task("gtfsplitter", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gtf.GtfFileSplitter"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("bamheteroplasmy", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.mito.BamHeteroplasmy"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("depthofcoverage", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.coverage.DepthOfCoverage"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add( task("hmmmergebed", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.hmm.HmmMergeBed"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });
all2.add( task("plateoptimizer", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.plateoptimizer.PlateOptimizer"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add( task("gloussouarn01", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.gloussouarn.GLoussouarn01"
        });





all2.add(task("gridssmergebnd", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.structvar.gridss.GridssMergeBnd"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });
all2.add(task("gridsspostprocessvcf", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.structvar.gridss.GridssPostProcessVcf"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add(task("vcfpostprocesssv", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.structvar.VcfPostProcessSV"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add(task("baicov", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.structvar.BaiCov"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });


all2.add(task("telseq", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.telseq.TelSeq"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add(task("combinevcffisher", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.burden.CombineVcfFisher"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });


all2.add(task("expansionhuntermerge", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.expansionhunter.ExpansionHunterMerge"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });





all2.add(task("bamxtremdepth", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.bamxdepth.BamXtremDepth"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });


all2.add( task("iranomescrapper", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.iranome.IranomeScrapper"
	jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient","gson")
	});


all2.add( task("vcfroh", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.roh.VcfROH"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});


all2.add( task("fastqsw", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.fastqsw.FastqSW"
	jarLibs = combineLibs("htsjdk","testng","jcommander","biojava")
	});



/*

BioToRDF.java",
RDFCombine.java"
*/

all2.add(task("jvarkit", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.jvarkit.JvarkitCentral"
	with_jaxb = true
	otherJavaFiles  = [ "**/vcfstats/*.java", "**/spring/*.java", "**/AlleleFrequencyCalculator.java", "**/AlmostSortedVcf.java", "**/ApplyVelocity.java", "**/TSSEnrichment.java", "**/AddLinearIndexToBed.java", "**/BreakdancerToVcf.java", "**/BatchIGVPictures.java", "**/BarcodeGenerator.java", "**/BlastToSam.java", "**/BlastFilterJS.java", "**/BlastNToSnp.java","**/BlastMapAnnotations.java", "**/BamLiftOver.java", "**/BamLeftAlign.java", "**/BamToHaplotypes.java","**/BamCmpCoverage.java", "**/BamToSql.java", "**/BedMergeCnv.java", "**/BedIndexTabix.java", "**/BedToVcf.java", "**/BackLocate.java", "**/BamToFastq.java", "**/Bam2Raster.java","**/BamToMNV.java", "**/BamClipToInsertion.java", "**/BamMatrix.java", "**/Bam2Wig.java", "**/BamPhased01.java", "**/Bam2Xml.java", "**/BamStats04.java", "**/BamStats05.java", "**/BamToSVG.java", "**/BaseCoverage.java", "**/BamWithoutBai.java", "**/BamSliceBed.java", "**/BamTile.java", "**/BCFToolsMergeBest.java", "**/BedCluster.java", "**/BedNonOverlappingSet.java", "**/BedLiftOver.java", "**/BedRemoveBed.java", "**/BioAlcidae.java", "**/BioAlcidaeJdk.java","**/BigwigMerge.java", "**/BigWigTView.java", "**/Biostar9608448.java", "**/Biostar3654.java", "**/Biostar103303.java", "**/Biostar105754.java", "**/Biostar130456.java", "**/Biostar160470.java", "**/Biostar139647.java", "**/Biostar145820.java", "**/Biostar154220.java", "**/Biostar165777.java", "**/Biostar170742.java", "**/Biostar172515.java", "**/Biostar173114.java", "**/Biostar175929.java", "**/Biostar178713.java", "**/Biostar9556602.java", "**/Biostar95652.java", "**/Biostar214299.java", "**/Biostar234081.java", "**/Biostar234230.java", "**/Biostar251649.java", "**/Biostar322664.java", "**/Biostar332826.java", "**/Biostar336589.java", "**/Biostar352930.java", "**/Biostar398854.java", "**/Biostar404363.java", "**/Biostar480685.java", "**/Biostar489074.java", "**/Biostar497922.java", "**/Biostar59647.java", "**/Biostar76892.java", "**/Biostar77288.java", "**/Biostar77828.java", "**/Biostar78285.java", "**/Biostar81455.java", "**/Biostar84452.java", "**/Biostar84786.java", "**/Biostar86363.java", "**/Biostar86480.java", "**/Biostar90204.java", "**/Biostar9462889.java", "**/Biostar9469733.java", "**/Biostar9501110.java", "**/Biostar9566948.java", "**/BuildDbsnp.java", "**/DictToBed.java", "**/DictToR.java", "**/DictToXml.java", "**/DragenBndToInversion.java", "**/CoverageGrid.java", "**/CompareBamAndBuild.java", "**/CommBams/java", "**/CompareBams.java", "**/CompareBams4.java", "**/CoverageMatrix.java", "**/CoverageServer.java", "**/CnvTView.java", "**/BedRenameChromosomes.java", "**/CopyNumber01.java", "**/ConvertBamChromosomes.java", "**/ConvertVcfChromosomes.java", "**/CoveragePlotter.java","**/ConvertLiftOverChain.java", "**/CytobandToSvg.java", "**/EVADumpFiles.java",  "**/ExtendReferenceWithReads.java", "**/HowManyBamDict.java", "**/HaploGroupCaseControl.java", "**/HtsVelocity.java",  "**/IbdToVcf.java","**/.IndexCovToVcf.java", "**/IlluminaDirectory.java","**/JBrowse2Server.java", "**/FastqGrep.java", "**/FastqRevComp.java", "**/FixVcfMissingGenotypes.java", "**/FastqShuffle.java","**/FindNewSpliceSites.java", "**/FindAVariation.java", "**/FindAllCoverageAtPosition.java", "**/FindGVCFsBlocks.java", "**/FindHtsFileDictionary.java","**/GatkHaplotypeCaller.java", "**/Gff2KnownGene.java", "**/GtfLiftOver.java", "**/GtfRetroCopy.java", "**/Gff3UpstreamOrf.java","**/Gff3UpstreamOrf.java", "**/Gff3ToFasta.java", "**/GtexRsToQTL.java","**/GoUtils.java", "**/GroupByGene.java", "**/GtfToGff.java", "**/GtfToBed.java", "**/Gtf2Xml.java","**/KnownRetroCopy.java", "**/KnownDeletion.java", "**/KnownGeneToFasta.java","**/KgToGff.java","**/KnownGenesToBed.java", "**/LiftOverToSVG.java", "**/LowResBam2Raster.java","**/OptimizeFisher.java","**/MapUniProtFeatures.java", "**/Manhattan.java", "**/MergeSplittedBlast.java", "**/MergeBlastXml.java", "**/MiniCaller.java", "**/MultiqcPostProcessor.java",  "**/MakeMiniBam.java", "**/MantaMerger.java", "**/MsaToVcf.java", "**/NcbiTaxonomyToXml.java", "**/NgsFilesSummary.java", "**/OboUtils.java", "**/PlotSashimi.java", "**/PlotMosdepth.java", "**/PlotBcftoolsStats.java", "**/PrettySam.java", "**/Pubmed404.java", "**/PubmedOrcidGraph.java",  "**/PcrClipReads.java", "**/PcrSliceReads.java", "**/PubmedCodingLanguages.java", "**/PubmedGender.java", "**/PubmedDump.java","**/PubmedAuthorGraph.java", "**/PubmedGraph.java", "**/QQPlotter.java", "**/RNASeqPolyA.java","**/RegenieSwing.java","**/RegenieMakeAnnot.java", "**/RegenieBedAnnot.java", "**/RegenieFunctionalAnnot.java", "**/RegenieSlidingAnnot.java", "**/ReferenceToVCF.java", "**/ReduceBlast.java", "**/RepairFastq.java", "**/ReferenceToHtml.java","**/SameDict.java", "**/ShiftBam.java" , "**/ShiftVcf.java", "**/SamClipIndelFraction.java", "**/SamExtractClip.java","**/SamFixCigar.java", "**/SamAddPI.java", "**/Sam2Tsv.java", "**/SamViewWithMate.java", "**/SamGrep.java", "**/SamToPsl.java", "**/ScanRetroCopy.java", "**/ScanStructuralVariants.java", "**/ScanLabGuru.java", "**/SortSamRefName.java", "**/SamRemoveDuplicatedNames.java", "**/StarRetroCopy.java", "**/SplitVcf.java", "**/SetFileTools.java", "**/SetFileCluster.java", "**/SetFileFromBed.java",  "**/SamToJson.java", "**/SamFindClippedRegions.java", "**/SvToSVG.java", "**/SortVcfOnInfo.java", "**/SwingBamCov.java", "**/SwingBamView.java","**/SwingIndexCov.java", "**/SwingPLinkSelectCluster.java", "**/SwingVcfJexlFilter.java", "**/SwingVcfView.java", "**/SVCasesControls.java", "**/StructuralVariantToFasta.java", "**/TextBam.java",  "**/TranslateGff3.java", "**/TViewCmd.java", "**/VariantsInWindow.java", "**/VcfLiftOver.java", "**/VcfFilterByLiftOver.java", "**/Vcf2Xml.java","**/VCFTabixml.java", "**/VcfTbiToBed.java", "**/VcfToHilbert.java", "**/VcfToRScript.java", "**/VcfPeekVcf/java", "**/VcfFilterGtf.java", "**/VcfAncestralAllele.java", "**/VcfSamplesPRS.java", "**/VcfSpringFilter.java","**/VcfConcat.java", "**/VcfServer.java", "**/VCFFlatten.java", "**/VcfDistanceBetweenVariants.java", "**/VcfAlleleBalance.java", "**/VcfMoveFiltersToInfo.java",  "**/VcfMultiToOne.java", "**/VcfMultiToOneAllele.java", "**/VcfMultiToOneInfo.java", "**/UniprotFilterJS.java", "**/UniprotToSvg.java", "**/UKBiobankSelectSamples.java", "**/VcfBurdenSlidingWindow.java", "**/VCFSVAnnotator.java", "**/VcfSetSequenceDictionary.java", "**/VcfPeekAf.java", "**/VcfPseudoAutosomalRegion.java", "**/VCFBigWig.java", "**/VCFComposite.java", "**/VcfStrechToSvg.java", "**/VCFShuffle.java", "**/VcfBigBed.java", "**/VcfGatkEval.java", "**/VcfGrantham.java", "**/VcFilterGenes.java", "**/VcfFilterJdk.java", "**/VcfFilterSequenceOntology.java", "**/VCFTrios.java", "**/VcfGeneSplitter.java","**/VcfRegulomeDB.java", "**/VcfGnomad.java", "**/VcfGnomadSV.java", "**/VcfHead.java", "**/VCFPolyX.java", "**/VcfRebase.java", "**/VcfPhased01.java", "**/VcfSplitNVariants.java", "**/VCFCombineTwoSnvs.java", "**/VcfTail.java", "**/VcfToTable.java", "**/VcfCadd.java", "**/VcfSpliceAI.java", "**/VcfBurdenFisherH.java", "**/VcfStats.java", "**/VcfToIntervals.java", "**/VcfBurdenMAF.java", "**/VcfGroupByPopulation.java", "**/CNVValidatorServer.java","**/VcfToBam.java", "**/VcfScanUpstreamOrf.java","**/WibToBedGraph.java", "**/WesCnvSvg.java", "**/WGSCoveragePlotter.java", "**/XsltStream.java","**/XContaminations.java"]
        jarLibs = combineLibs("htsjdk","testng","jcommander","math","jetty","httpclient","gson", "springcontext","velocity","jaxb","berkeleydb")
        });



all2.add(task("jeter", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.labguru.ScanLabGuru"
        jarLibs = combineLibs("htsjdk","testng","jcommander","httpclient","gson")
        });

all2.add(task("jeter3", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.bio2rdf.BioToRDF"
        jarLibs = combineLibs("htsjdk","testng","jcommander","jena")
        });
all2.add(task("jeter4", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.htsfreemarker.HtsFreemarker"
        jarLibs = combineLibs("htsjdk","testng","jcommander","freemarker","gson")
        });

all2.add(task("jeter2", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.samplesrdf.SamplesRDFServer"
        jarLibs = combineLibs("htsjdk","testng","jcommander","arq","jetty")
        });
all2.add(task("jeter5", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.burden.OptimizeFisher"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });
all2.add(task("jeter6", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.genome2svg.GenomeToSvg"
        jarLibs = combineLibs("htsjdk","testng","jcommander","springcontext")
        });
all2.add(task("jeter7", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.fastq.RepairFastq"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });
all2.add(task("jeter8", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.bigwigmerge.BigwigMerge"
        jarLibs = combineLibs("htsjdk","testng","jcommander","math")
	});
all2.add(task("jeter9", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.plotrare.PlotRareVariants"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });

all2.add(task("jeter10", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.dict2xml.DictToXml"
        jarLibs = combineLibs("htsjdk","testng","jcommander")
        });
all2.add(task("jeter11", type: CompileJVarkit) {
        mainClass = "com.github.lindenb.jvarkit.tools.vcfstats.VcfStats2"
        jarLibs = combineLibs("htsjdk","testng","jcommander","gson")
        });

all2.add( task("jeter13", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.coveragegrid.CoverageGrid"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("jeter14", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.translategff3.TranslateGff3"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("jeter15", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.gnomad.coocurence.VcfGnomadCoOccurence"
	jarLibs = combineLibs("htsjdk","testng","jcommander","gson","httpclient")
	});

all2.add( task("jeter16", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.upstreamorf.Gff3UpstreamOrf"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

all2.add( task("jeter17", type: CompileJVarkit) {
	mainClass = "com.github.lindenb.jvarkit.tools.snake2nf.SnakemakeToNextflow"
	jarLibs = combineLibs("htsjdk","testng","jcommander")
	});

 
/** bottom task */

task("all2",dependsOn:all2) {
	doLast {
		project.logger.warn("all2 tasks done.");
	       }
	} 

task("all",dependsOn:all) {
	doLast {
		project.logger.warn("all tasks done.");
	       }
	} 

 task("top") {
	doLast {
		project.logger.warn("This  is the top target. Run 'gradlew name-of-target' to build the desired target. Run 'gradlew all' if you're Pierre Lindenbaum. See http://lindenb.github.io/jvarkit/  for a list of the available tools.");
	       }
	} 


allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.fork = true
    }

}
